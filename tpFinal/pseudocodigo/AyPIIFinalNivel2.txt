ALGORITMICA 2 - TP Final

NIVEL 2 


procedimiento agregarCliente (E/S client:tipoArbolClientes)
{Qué Hace: agrega un nuevo cliente
PRE: client = C ; C puede estar vacío o tener clientes válidos
POST: client = C1 ; C1 tiene un cliente nuevo agregado
EXCEP:	}
Var
	cliente:tipoInfoClientes
	dni:tipoClaveClientes
Inicio
	
	dni <- enteroMayorACero("Ingrese DNI de cliente")	{SC}

	cliente.nombre <- textoNoVacio("Ingrese Nombre")	{SC}

	cliente.telefono <- EnteroMayorACero("Telefono")	{SC}

	cliente.email <- obtenerEmail()						{nivel 3}

	crear(cliente.vehiculos)							{ADT LO}

	insertar(client, dni, cliente)						{ADT LO}

Excepciones
	arbolLleno => mostrar("No se puede agregar un cliente, intente nuevamente más tarde")
Fin

procedimiento modificarCliente(E/S client:tipoArbolClientes ; E/S serv:tipoListaServicios)
{Qué Hace: permite modificar los datos pertenecientes a un cliente en particular
PRE: client = C ; C contiene al menos un cliente válido ; model = M ; M contiene al menos un modelo valido
POST: client = C1 ; C1 contiene un cliente con los datos modificados o no
EXCEP: errorEnModificarCliente }
Var
	dni:tipoClaveClientes
	viejoDni:tipoClientes
	datosCliente:tipoInfoClientes
	opc:entero
Inicio

	viejoDni <- obtenerCliente(client)	{nivel 2} //opcion para cancela modif a traves de excep
	dni <- viejoDni
	
	repetir
		menuModifClient()	{nivel 3}
		ingresar(opc)		{SC}				
		segun opc hacer
			1:dni <- EnteroMayorACero("Ingrese DNI")
			2:i.nombre <- textoNoVacio("Ingrese Nombre")						{SC}
			3:datosCliente.telefono <- EnteroMayorACero("Numero de telefono")	{SC}
			4:cliente.email <- obtenerEmail()									{nivel 3}
		finSegun
	hasta (opc = 5)
			
	modificar(client, dni, cliente)			{ADT ABB}
	
	si (dni <> viejoDni) entonces
		actualizarSC(serv, viejoDni, dni)	{nivel 3}
	finSi

Excepciones
	noHayClientes => mostrar("No hay clientes agregados. Agregue un cliente e intente nuevamente")
	cancelarIngreso => nada
Fin


procedimiento quitarCliente(E/S client:tipoArbolClientes ; E/S serv:tipoListaServicios)
{Qué Hace: quita un cliente y actualiza su relación con respecto a los servicios a su nombre
PRE: client = C ; C tiene que tener al menos un cliente válido ; serv = S 
POST: client = C1 ; C1 tiene un cliente menos ; serv = S1 ; S1 tiene uno o más servicios menos si el cliente eliminado tenía algún servicio a su nombre
EXCEP:	}
Var
	dni:tipoClaveClientes
Inicio

	dni <- obtenerCliente(client)	{nivel 2}	//opcion para cancela modif a traves excep
	
	si (confirma("Esta seguro que desea eliminar este cliente?")) ent 	{SC}
		limpiarCliente(client, dni)										{nivel 3}
		suprimir(client, dni)											{ADT LO}

		//elimina de los servicios todos aquellos que tengan ese dni como dniCliente
		bajaSC(serv, dni)											{nivel 3}
	finSi

Excepciones
	noHayClientes => mostrar("No hay clientes agregados. Agregue un cliente e intente nuevamente")
	cancelarIngreso => nada
Fin


procedimiento agregarModelo (E/S model:tipoListaModelos)
{Qué Hace: crea un nuevo modelo
PRE:	model = Mo ; Mo puede estar vacío o tener modelos válidos
POST:	model = Mo1; Mo1 tiene un modelo válido más que Mo
EXCEP:	}
Var
	datosModelo:tipoInfoModelos
	codigoModelo:tipoClaveModelos
Inicio

	codigoModelo <- generarCodigoModelo(model)			{nivel 3}
 
	modelo.nombre <- textoNoVacio("Nombre de Modelo")	{SC}

	crear(datosModelo.calendario)						{ADT LO}

	insertar(model, codigoModelo, datosModelo)				{ADT LO}

Excepciones
	listaLLena => mostrar("No hay espacio para un nuevo modelo, intente nuevamente más tarde.")
Fin

procedimiento modificarModelo(E/S model:tipoListaModelos ; E/S serv:tipoListaServicios ; E/S client:tipoArbolClientes)
{Qué Hace: Permite modificar los datos correpondientes a un modelo en particular y actualiza las relaciones de dicho modelos con los clientes y los servicios realizados
PRE: model = M ; M contiene al menos un modelo ; serv = S ; client = C
POST: model = M1 ; serv = S1 ; client = C1 ; M1, S1, C1 tiene cambios con respecto a M, S y C (respectivamente), segun lo haya querido el usuario
EXCEP: errorEnModificarModelo}
Var
	codigoModelo:tipoClaveModeloSs
	datosModelo:tipoInfoModelos
Inicio

	codigoModelo <- obtenerModelo(model)	{nivel 3}	//opcion para cancela modif a traves excep

	repetir
		menuModifModelo()	{nivel 3}
		ingresar(opc)		{SC}
		segun (opc) hacer
			1: datosModelo.nombre <- textoNoVacio("Ingrese Nombre de Modelo")	{SC}
			2: ABMCalendario(datosModelo.calendario)							{nivel 3}
		finSegun
	hasta (opc = 3)

	suprimir(model, codigoModelo)
	insertar(model, codigoModelo, datosModelo)								{ABB LO}
	actualizarSM(serv, client, codigoModelo)								{nivel 3}

Excepciones
	listaLlena => lanzar errorEnModificarModelo
	noHayModelos => mostrar("No existen modelos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedimiento quitarModelo(E/S model:tipoListaModelos ; E/S serv:tipoListaServicios ; E/S client:tipoArbolClientes)
{Qué Hace: quita un modelo y actualiza su relacion con los clientes y los servicios
PRE:	model = M ; M tiene al menos un modelo ; serv = S ; client = C
POST:	model = M1 ; M1 tiene un cliente menos ; serv = S1 ; client = C1 ; C1 y S1 tienen clientes o servicios menos si el modelo eliminado tenia servicios
		relacionados o un cliente tenía un vehiculo de ese modelo en particular
EXCEP: }
Var
	codigoModelo:tipoClaveModelos
Inicio

	codigoModelo <- obtenerModelo(model)	{nivel 3}	//opcion para cancela modif a traves excep

	si (confirma("Está seguro que desea eliminar este modelo?")) ent
		limpiarModelo(model, codigoModelo) 	{nivel 3}
		suprimir(model, codigoModelo)		{ADT LO}
		bajaSM(codigoModelo, serv)	{nivel 3}
	finSi

Excepciones
	noHayModelos => mostrar("No existen modelos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedmiento agregarVehiculo(E/S client:tipoArbolClientes; E dni:tipoClaveClientes ; E model:tipoListaModelosModelos)
{Que Hace: agrega un vehiculo para un cliente determinado
PRE: 	client = C ; C tiene al menos un cliente valido ; dni = K ; K es un numero de DNI perteneciente a un cliente existente
		model = M ; M contiene al menos un modelo valido
POST:	client = C1; C1 tiene un nuevo vehiculo agregado a un cliente segun lo que haya decidido el usuario
EXCEP: }
Var
	datosCliente:tipoInfoClientes
	vehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
Inicio
	
	patente <- obtenerPatente() {nivel 3}

	vehiculo.modelo <- obtenerModelo(model)									{nivel 3}

	vehiculo.añoFabric <- enteroMayorACero("Ingrese año de fabricacion")	{SC}

	crear(vehiculo.manten)													{ADT LO}
	
	buscar(client, dni, datosCliente)										{ADT ABB}

	insertar(datosCliente.vehiculos, patente, vehiculo)						{ADT LO}	

	modificar(client, dni, datosCliente)									{ADT ABB}

Excepciones
	listaLlena => mostrar("No se puede agregar un vehículo en este momento. Intente nuevamente más tarde")
	noHayModelos => mostrar("No existen modelos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada

Fin

procedimiento modificarVehiculo(E/S client:tipoArbolCLientes ; E dni:tipoClaveClientes ; E model:tipoListaModelos)
{Que Hace: modifica los vehiculos pertenecientes a un cliente en particular
PRE: client = C ; dni = K y K pertence a C; model = M ; M contiene al menos un modelo valido
POST: client = C1 ; C1 tiene cambios segun lo haya decidido el usuario
EXCEP: errorEnModificarVehiculo}
Var
	datosCliente:tipoInfoClientes
	vehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
	opc:entero
Inicio
	buscar(client, dni, datosCliente)						{ADT ABB}
	patente <- obtenerVehiculo(datosCliente.vehiculos)		{nivel 3}
	recuClave(datosCliente.vehiculos, patente, vehiculo)	{ADT LO}
	
	repetir
		menuModifVehiculo()						{nivel 3}
		ingresar(opc)							{SC}

		segun (opc) hacer
			1: vehiculo.modelo <- obtenerModelo(model)										{nivel 3}
			2: vehiculo.añoFabric <- enteroMayorACero("Ingrese nuevo año de fabricacion")	{SC}
		finSegun
	hasta (opc = 3)

	suprimir(datosCliente.vehiculos, patente)				{ADT LO}
	insertar(datosCliente.vehiculos, patente, vehiculo)		{ADT LO}
	modificar(client, dni, datosCliente)					{ADT ABB}

Excepciones
	listaLlena => lanzar errorEnModificarVehiculo
	noHayVehiculos => mostrar("No existen vehiculos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedimiento quitarVehiculo(E/S client:tipoArbolClientes ; E dni:tipoClaveClientes ; E/S serv:tipoListaServicios)
{Que Hace: elimina un vehiculo de un cliente
PRE: client = C ; dni = K ; K pertenece a C ; serv = S
POST:	client = C1 ; C1 tiene un vehiculo menos segun haya deseado el usuario
EXCEP: ErrorEnQuitarVehiculo}
Var
	vehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
	datosCliente:tipoInfoClientes
Inicio
	//recuperamos el cliente
	buscar(client, dni, datosCliente)						{ADT ABB}
	
	//recuperamos el vehiculo
	patente <- obtenerVehiculo(datosCliente.vehiculos)		{nivel 3}
	recuClave(datosCliente.vehiculos, patente, vehiculo)	{ADT LO}

	//vaciamos lista de mantenimiento
	vaciar(vehiculo.manten)									{ADT LO}

	//actualizamos vehiculo en la lista de vehiculos del client
	suprimir(datosCliente.vehiculos, patente)				{ADT LO}
	insertar(datosCliente.vehiculos, patente,vehiculo)		{ADT LO}
	
	//eliminamos dicho vehiculo
	suprimir(datosCliente.vehiculos, patente)				{ADT LO}

	//modificamos dicho nodo del arbol de clientes
	modificar(client, dni, datosCliente)					{ADT ABB}

	//actualizamos referencias cruzadas en servicios
	bajaSV(serv, patente)									{nivel 3}

Excepciones
	listaLLena => lanzar ErrorEnQuitarVehiculo
	cancelarIngreso => nada
Fin



procedimiento agregarServicio(E/S serv:tipoListaServicios ; E/S client:tipoArbolClientes ; E model:tipoListaModelos)
{Qué Hace: agrega un nuevo servicio realizado a un vehiculo en particular
PRE:	serv = S ; client = C ; model = M 
POST:	serv = S1 ; S1 tiene un nuevo servicio según lo haya querido el usuario
EXCEP:	}
Var
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	datosCliente:tipoInfoClientes
Inicio
	//gener codigo de servicio
	codigoServicio <- generarCodigoServicio(serv)	{nivel 3}

	//obtener cliente
	datosServicio.dniCLiente <- obtenerCliente(client) {nivel 2}

	//obtener un vehiculo al cual hacerle un servicio
	buscar(client, datosServicio.dniCLiente, datosCliente)			{ADT ABB}
	datosServicio.dominio <- obtenerPatente(datosCliente.vehiculos)	{nivel 3}

	//obtener etapa de mantenimiento, verificando que haya
	datosServicio.etapa <- obtenerEtapa(model, datosCliente.vehiculos, datosServicio.dominio)	{nivel 3}

	//obtener kilometraje real, verificando que no sea menor al de la etapa de calendario, ni mayor a la que sigue
	datosServicio.kmReal <- obtenerKmReal(datosServicio.etapa)								{nivel 3}

	//obtener fecha del mantenimiento
	datosServicio.fecha <- obtenerFecha("Fecha del servicio")								{nivel 3}

	//obtener precio final del mismo, verificando que no sea menor al establecido en el calendario
	datosServicio.precioFinal <- obtenerPrecioFinal(model, datosServicio.etapa)				{nivel 3}

	insertar(serv, codigoServicio, datosServicio)											{ADT LO}

	actualizarVS(client, codigoServicio, datosServicio.dominio, datosServicio.dniCLiente)	{nivel 3}

Excepciones
	listaLLena => mostrar("No se puede agregar un servicio en este momento. Intente nuevamente más tarde")
	noHayEtapas => mostrar("El modelo seleccionado no posee etapas en el calendario de mantenimientos. Agregue una e intente nuevamente")
	noHayClientes => mostrar("No hay clientes agregados. Agregue uno e intente nuevamente")
	noHayVehiculos => mostrar("El cliente no tiene vehiculos a su nombre. Agregue uno e intente nuevamente")
	cancelarIngreso => nada

Fin

procedimiento modificarServicio(E/S serv:tipoListaServicios; E/S client:tipoArbolClientes ; E model:tipoListaModelos)
{Qué Hace: modifica los datos de un servicio de mantenimiento en particular
PRE: serv = S ; client = C ; model = M
POST: serv = S1 ; client = C1 ; S1 es distinto de S y C1 distinto de C según lo haya decidido el usuario
EXCEP:	errorEnModificarServicio}
Var
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
Inicio
	
	codigoServicio <- obtenerServicio(serv)																{nivel 3}

	repetir
		menuModifServicio()
		ingresar(opc)
		segun opc hacer
			1: 	obtenerCliente(client, datosServicio.dniCLiente)										{nivel 2}
			2: 	inicio
					buscar(client, datosServicio.dniCLiente, datosCliente)								{ADT ABB}
					obtenerPatente(datosCliente.vehiculos, datosServicio.dominio) 						{nivel 3}
				fin
			3:	obtenerEtapa(model, datosCliente.vehiculos, datosServicio.dominio, datosServicio.etapa) {nivel 3}
			4:	obtenerFecha("Fecha del servicio", datosServicio.fecha)									{nivel 3}
			5:	obtenerPrecioFinal(model, datosServicio.etapa, datosServicio.precioFinal)				{nivel 3}
		finSegun
	hasta (opc = 6)

	suprimir(serv, codigoServicio)
	insertar(serv, codigoServicio, datosServicio)

	altaSV(client, codigoServicio, datosServicio.dominio)

Excepciones
	listaLlena => lanzar errorEnModificarServicio
	noHayServicios => mostrar("No existen servicios. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedimiento quitarServicio(E/S serv:tipoListaServicios; E/S client:tipoArbolClientes)
{Qué Hace: elimina un servicio
PRE: serv = S; client = C
POST: serv = S1 ; client = C1; S1 es distinto de S y C1 distinto de C según lo haya decidido el usuario
EXCEP: }
Var
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
Inicio

	codigoServicio <- obtenerServicio(serv)					{nivel 3}
	recuClave(serv, codigoServicio, datosServicio)			{ADT LO}
	suprimir(serv, codigoServicio)							{ADT LO}
	bajaSV(client, codigoServicio, datosServicio.dominio)	{nivel 3}

Excepciones
	noHayServicios => mostrar("No existen servicios. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin 

funcion obtenerCliente(E client:tipoArbolClientes):tipoClaveClientes
{Qué Hace: devuelve un dni correspondiente a un cliente existente
PRE: client = C
POST: obtenerCliente = D ; D pertenece a C
Excep: 	noHayClientes
		ingresoCancelado}
Var
	valido:logico
	dni:tipoClaveClientes
	i:tipoInfoClientes
Inicio
	valido <- F
	si(esVacio(client)) entonces
		lanzar noHayClientes				{SC}
	siNo
		repetir
			ingresar(dni)					{SC}
			si dni = 0 entonces
				lanzar ingresoCancelado		{SC}
			siNo
				Inicio
					buscar(client, dni,i)	{ADT ABB}
					valido <- V 			{SC}
				Excepciones
					claveNoExiste => nada	{SC}
				Fin
			finSi
		hasta valido
	finSI
	obtenerCliente <- dni 					{SC}
Fin




procedimiento menuModelos()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de modelos
PRE: -
POST:-
EXCEP: -}
Inicio

	mostrar("Seleccione una Opcion")													{SC}
	mostrar("1 - Agregar Modelo")														{SC}
	mostrar("2 - Modificar Modelo (Nombre o Etapas de su calendario de Mantenimiento)")	{SC}
	mostrar("3 - Quitar Modelo")														{SC}
	mostrar("4 - Salir")																{SC}

Fin

procedimiento menuClientes()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de clientes
PRE: -
POST:-
EXCEP: -}

Inicio
	mostrar("Seleccione una Opcion")	{SC}
	mostrar("1 - Agregar Cliente")		{SC}
	mostrar("2 - Modificar Cliente")	{SC}
	mostrar("3 - Quitar Cliente")		{SC}
	mostrar("4 - Salir") {SD}

procedimiento menuServicios()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de clientes
PRE: -
POST:-
EXCEP: -}

Inicio
	mostrar("Seleccione una Opcion")	{SC}
	mostrar("1 - Agregar Servicios")	{SC}
	mostrar("2 - Modificar Servicios")	{SC}
	mostrar("3 - Quitar Servicios")		{SC}
	mostrar("4 - Salir") {SD}
Fin 

procedimiento menuConsultas()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de clientes
PRE: -
POST:-
EXCEP: -}

Inicio
	mostrar("Seleccione una Opcion")									{SC}
	mostrar("1 - Consultar mantenimientos por modelos")					{SC}
	mostrar("2 - Consultar mantenimientos por cliente")					{SC}
	mostrar("3 - Consultar datos de clientes sin mantenimientos")		{SC}
	mostrar("4 - Salir") 												{SC}
Fin