ALGORITMICA 2 - TP Final

NIVEL 2 

procedimiento agregarModelo (E/S model:tipoListaModelos)
{Qué Hace: crea un nuevo modelo
PRE:	model = Mo ; Mo puede estar vacío o tener modelos válidos
POST:	model = Mo1; Mo1 tiene un modelo válido más que Mo
EXCEP:	}
Var
	i:tipoInfoModelos
	k:tipoClaveModelos
Inicio

	si (longitud(model) = 0) entonces	{ADT LO}
		k <- 1
	siNo
		recuUlt(model, k)				{ADT LO}
		k <- k+1
			//generamos la clave autonumerada
	finSi

	mostrar("Ingrese el nombre del modelo")	{SC}

	ingresar(i.nombre)						{SC}

	crear(i.calendario)						{ADT LO}

	insertar(model, k, i)					{ADT LO}

Excepciones
	listaLLena => mostrar("No hay espacio para un nuevo modelo, intente nuevamente más tarde.")
Fin

procedimiento agregarCliente (E/S client:tipoArbolClientes)
{Qué Hace: agrega un nuevo cliente
PRE: client = C ; C puede estar vacío o tener clientes válidos
POST: client = C1 ; C1 tiene un cliente nuevo agregado
EXCEP:	}
Var
	i:tipoInfoClientes
	k:tipoClaveClientes
Inicio
	mostrar("DNI")						{SC}
	
	enteroEnRango(1000000, 40000000, k)	{SC}

	mostrar("Telefono")					{SC}

	ingresar(i.telefono)				{SC}

	mostrar("E-Mail")					{SC}

	ingresar(i.email)					{SC}

	crear(i.vehiculos)					{ADT LO}

	insertar(client, k, i)				{ADT LO}
Excepciones
	listaLLena => mostrar("No se puede agregar un cliente, intente nuevamente más tarde")
Fin


procedimiento menuModelos()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de modelos
PRE: -
POST:-
EXCEP: -}
Inicio

	mostrar("Seleccione una Opcion")													{SC}
	mostrar("1 - Agregar Modelo")														{SC}
	mostrar("2 - Modificar Modelo (Nombre o Etapas de su calendario de Mantenimiento)")	{SC}
	mostrar("3 - Quitar Modelo")														{SC}
	mostrar("4 - Salir")																{SC}

Fin

procedimiento modificarCliente(E/S client:tipoArbolClientes ; E model:tipoListaModelos)
{Qué Hace: permite modificar los datos pertenecientes a un cliente en particular
PRE: client = C ; C contiene al menos un cliente válido ; model = M ; M contiene al menos un modelo valido
POST: client = C1 ; C1 contiene un cliente con los datos modificados o no
EXCEP: - }
Var
	k:tipoClaveClientes
	opc:entero
Inicio

	obtenerCliente(k, client)	{nivel 2} //opcion para cancela modif a traves de excep
	menuModifClient()	{nivel 3}
	ingresar(opc)		{SC}				
	segun opc hacer
		1:modifNombre(k)		{nivel 3}
		2:modifTelefono(k)		{nivel 3}
		3:modifEmail(k)			{nivel 3}
	finSegun
Excepciones
	cancelarIngreso => nada
Fin

procedimiento modificarModelo(E/S model:tipoListaModelos ; E/S serv:tipoListaServicios ; E/S client:tipoArbolClientes)
{Qué Hace: Permite modificar los datos correpondientes a un modelo en particular y actualiza las relaciones de dicho modelos con los clientes y los servicios realizados
PRE: model = M ; M contiene al menos un modelo ; serv = S ; client = C
POST: model = M1 ; M1 tiene un modelo con datos distintos
EXCEP: -	}
Var
	k:tipoClaveModelos
Inicio

	obtenerModelo(k,model)	{nivel 3}	//opcion para cancela modif a traves excep
	menuModifModelo()	{nivel 3}
	ingresar(opc)		{SC}
	segun (opc) hacer
		1: modificarNombre(k)	{nivel 3}
		2: ABMCalendario()		{nivel 3}
	finSegun
	actualizarVM(k,client)	{nivel 3}
	actualizarSM(k,serv)	{nivel 3}

Excepciones
	cancelarIngreso => nada
Fin

procedimiento quitarCliente(E/S client:tipoArbolClientes ; E/S serv:tipoListaServicios)
{Qué Hace: quita un cliente y actualiza su relación con respecto a los servicios a su nombre
PRE: client = C ; C tiene que tener al menos un cliente válido ; serv = S 
POST: client = C1 ; C1 tiene un cliente menos ; serv = S1 ; S1 tiene uno o más servicios menos si el cliente eliminado tenía algún servicio a su nombre
EXCEP:	}
Var
	k:tipoClaveClientes
Inicio

	obtenerCliente(k,client)	{nivel 2}	//opcion para cancela modif a traves excep
	
	si (confirma("Esta seguro que desea eliminar este cliente?")) ent
		limpiarNodo(client, k)		{nivel 3}
		suprimir(client, k)			{ADT LO}
		actualizarSC(k, serv)		{nivel 3}
	finSi

Excepciones
	cancelarIngreso => nada
Fin

procedimiento quitarModelo(E/S model:tipoListaModelos ; E/S serv:tipoListaServicios ; E/S client:tipoArbolClientes)
{Qué Hace: quita un modelo y actualiza su relacion con los clientes y los servicios
PRE:	model = M ; M tiene al menos un modelo ; serv = S ; client = C
POST:	model = M1 ; M1 tiene un cliente menos ; serv = S1 ; client = C1 ; C1 y S1 tienen clientes o servicios menos si el modelo eliminado tenia servicios
		relacionados o un cliente tenía un vehiculo de ese modelo en particular
EXCEP: }
Var
	k:tipoClaveModelos
Inicio

	obtenerModelo(k, model)	{nivel 3}	//opcion para cancela modif a traves excep

	si (confirma("Está seguro que desea eliminar este modelo?")) ent
		limpiarNodo(model, k) 	{nivel 3}
		suprimir(model, k)		{nivel 3}
		actualizarSM(k, serv)	{nivel 3}
		actualizarVM(k, client)	{nivel 3}
	finSi

Excepciones
	cancelarIngreso => nada
Fin

procedmiento agregarVehiculo(E/S client:tipoArbolClientes; E k:tipoClaveClientes ; E model:tipoListaModelosModelos)
{Que Hace: agrega un vehiculo para un cliente determinado
PRE: 	client = C ; C tiene al menos un cliente valido ; k = K ; K es un numero de DNI perteneciente a un cliente
		model = M ; M contiene al menos un modelo valido
POST:	client = C1; C1 tiene un nuevo vehiculo agregado a un cliente segun lo que haya decidido el usuario
EXCEP: }
Var
	c:tipoInfoClientes
	vehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
Inicio
	
	obtenerPatente(patente) {nivel 3}

	obtenerModelo(vehiculo.modelo,model)	{nivel 3}	//opcion para cancela modif a traves excep

	enteroMayorACero(vehiculo.añoFabric, "Ingrese año de fabricacion")		{SC}

	crear(vehiculo.manten)						{ADT LO}
	
	buscar(client, k, c)						{ADT ABB}

	insertar(c.vehiculos, patente, vehiculo)	{ADT LO}	

	modificar(client, k, c)						{ADT ABB}

Excepciones
	cancelarIngreso => nada

Fin

procedimiento modificarVehiculo(E/S client:tipoArbolCLientes ; E k:tipoClaveClientes ; E model:tipoListaModelos)
{Que Hace: modifica los vehiculos pertenecientes a un cliente en particular
PRE: client = C ; k = K y K pertence a C; model = M ; M contiene al menos un modelo valido
POST: client = C1 ; C1 tiene cambios segun lo haya decidido el usuario
EXCEP:}
Var
	c:tipoInfoClientes
	vehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
	opc:entero
Inicio
	buscar(client, k, c)						{ADT ABB}
	obtenerVehiculo(c.vehiculos, patente)		{nivel 3}
	recuClave(c.vehiculos, patente, vehiculo)	{ADT LO}
	
	repetir
		menuModifVehiculo()						{nivel 3}
		ingresar(opc)							{SC}

		segun (opc) hacer
			1: cambiarModelo(vehiculo.modelo, model)									{nivel 3}
			2: enteroMayorACero(vehiculo.añoFabric, "Ingrese nuevo año de fabricacion")	{SC}
		finSegun
	hasta (opc = 3)

	suprimir(c.vehiculos, patente)				{ADT LO}
	insertar(c.vehiculos, patente, vehiculo)	{ADT LO}

Excepciones
	cancelarIngreso => nada
Fin

procedimiento quitarVehiculo(E/S client:tipoArbolClientes ; E k:tipoClaveClientes ; E/S serv:tipoListaServicios)
{Que Hace: elimina un vehiculo de un cliente
PRE: client = C ; k = K ; K pertenece a C ; serv = S
POST:	client = C1 ; C1 tiene un vehiculo menos segun haya deseado el usuario
EXCEP:}
Var
	vehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
	c:tipoInfoClientes
Inicio
	obtenerPatente(patente) 					{nivel 3}
	buscar(client, k, c)						{ADT ABB}
	recuClave(c.vehiculos, patente, vehiculo)	{ADT LO}
	vaciar(vehiculo.manten)						{ADT LO}
		
	suprimir(c.vehiculos, patente)				{ADT LO}
	insertar(c.vehiculos, patente,vehiculo)		{ADT LO}
	suprimir(c.vehiculos, patente)				{ADT LO}

	modificar(client, k, c)						{ADT ABB}

	actualizarSV(patente, serv)					{nivel 3}
Fin