 	ALGORITMICA 2 - TP Final

NIVEL 2 

función menuModelos()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de modelos
PRE: -
POST: menuModelos = O; O es una opcion valida
EXCEP: -}
Inicio

	mostrar("Seleccione una Opcion")													{SC}
	mostrar("1 - Agregar Modelo")														{SC}
	mostrar("2 - Modificar Modelo (Nombre o Etapas de su calendario de Mantenimiento)")	{SC}
	mostrar("3 - Quitar Modelo")														{SC}
	mostrar("4 - Salir")																{SC}

	menuModelos <- enteroEnRango("Ingrese su opción",1,4)	{SC}

Fin

procedimiento agregarModelo (E/S model:tipoListaModelos)
{Qué Hace: crea un nuevo modelo
PRE:	model = Mo ; Mo puede estar vacío o tener modelos válidos
POST:	model = Mo1; Mo1 tiene un modelo válido más que Mo
EXCEP:	}
Var
	datosModelo:tipoInfoModelos
	codigoModelo:tipoClaveModelos
Inicio

	codigoModelo <- generarCodigoModelo(model)			{nivel 3}
	datosModelo.nombre <- textoNoVacio("Nombre de Modelo")	{SC}
	crear(datosModelo.calendario)						{ADT LO}
	insertar(model, codigoModelo, datosModelo)				{ADT LO}

Excepciones
	listaLLena => mostrar("No hay espacio para un nuevo modelo, intente nuevamente más tarde.")
Fin


procedimiento agregarCliente (E/S client:tipoArbolClientes)
{Qué Hace: agrega un nuevo cliente
PRE: client = C ; C puede estar vacío o tener clientes válidos
POST: client = C1 ; C1 tiene un cliente nuevo agregado
EXCEP: - }
Var
	datosCliente:tipoInfoClientes
	dni:tipoClaveClientes
Inicio
	
	dni <- enteroMayorACero("Ingrese DNI de cliente")	{SC}

	Inicio
		buscar(client, dni, datosCliente) {ADT ABB}
		mostrar("Cliente ya existe") {SC}
	Excepciones
		ClaveNoExiste => 
			Inicio
				datosCliente.nombre <- textoNoVacio("Ingrese Nombre")	{SC}

				datosCliente.telefono <- EnteroMayorACero("Telefono")	{SC}

				datosCliente.email <- obtenerEmail()					{nivel 3}

				insertar(client, dni, cliente)							{ADT LO}
			Fin
	Fin
Excepciones
	arbolLleno => mostrar("No se puede agregar un cliente, intente nuevamente más tarde")
Fin

procedimiento modificarCliente(E/S client:tipoArbolClientes ; E/S vehiculos:tipoArbolVehiculos ; E/S serv:tipoListaServicios)
{Qué Hace: permite modificar los datos pertenecientes a un cliente en particular
PRE: client = C ; vehiculos = A ; serv = S ; 
POST: client = C1 ; C1 contiene un cliente con los datos modificados o no
EXCEP: - }
Var
	dni:tipoClaveClientes
	viejoDni:tipoClientes
	datosCliente:tipoInfoClientes
Inicio

	viejoDni <- obtenerCliente(client)	{nivel 2} 
	dni <- viejoDni
	modifCliente(datosCliente)		{nivel 3}	
	modificar(client, dni, datosCliente)			{ADT ABB}	
	si (dni <> viejoDni) entonces 					{SD}
		actualizarSC(serv, viejoDni, dni)			{nivel 3}
	finSi

	actualizarVC(vehiculos, dni)					{nivel 3}
Excepciones
	noHayClientes => mostrar("No hay clientes agregados. Agregue un cliente e intente nuevamente")
	cancelarIngreso => nada
Fin


procedimiento quitarCliente(E/S client:tipoArbolClientes ; E/S vehiculos:tipoArbolVehiculos ; E/S serv:tipoListaServicios)
{Qué Hace: quita un cliente y actualiza su relación con respecto a los servicios a su nombre
PRE: client = C ; C tiene que tener al menos un cliente válido ; serv = S 
POST: client = C1 ; C1 tiene un cliente menos ; serv = S1 ; S1 tiene uno o más servicios menos si el cliente eliminado tenía algún servicio a su nombre
EXCEP:	}
Var
	dni:tipoClaveClientes
Inicio

	dni <- obtenerCliente(client)											{nivel 2}	

	si (confirma("Esta seguro que desea eliminar este cliente?")) entonces 	{SC}
	
			suprimir(client, dni)											{ADT ABB}

		//elimina de los servicios todos aquellos que tengan ese dni como dniCliente
		bajaSC(serv, dni)													{nivel 3}
		bajaVC(vehiculos, dni)	{nivel 3}
	finSi

Excepciones
	noHayClientes => mostrar("No hay clientes agregados. Agregue un cliente e intente nuevamente")
	cancelarIngreso => nada
Fin



procedimiento modificarModelo(E/S model:tipoListaModelos ; E/S serv:tipoListaServicios ; E/S vehiculos:tipoArbolVehiculos)
{Qué Hace: Permite modificar los datos correpondientes a un modelo en particular y actualiza las relaciones de dicho modelos con los clientes y los servicios realizados
PRE: model = M ; M contiene al menos un modelo ; serv = S ; vehiculos = A
POST: model = M1 ; serv = S1 ; vehiculos = A1  ; M1, S1, A1 tiene cambios con respecto a M, S y A (respectivamente), segun lo haya deseado el usuario
EXCEP: }
Var
	codigoModelo:tipoClaveModelos
	datosModelo:tipoInfoModelos
Inicio

	codigoModelo <- obtenerModelo(model)			{nivel 3}	//opcion para cancela modif a traves excep
	recuClave(model, codigoModelo, datosModelo)		{ADT LO}
	modifModelo(datosModelo) 						{nivel 3}
	modificar(model, codigoModelo, datosModelo)		{ADT LO}
	bajaSMant(serv, datosModelo.calendario)			{nivel 3}
	actualizarVS(vehiculos, serv)					{nivel 3}

Excepciones
	noHayModelos => mostrar("No existen modelos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedimiento quitarModelo(E/S model:tipoListaModelos ; E/S serv:tipoListaServicios ; E/S vehiculos:tipoArbolVehiculos)
{Qué Hace: quita un modelo y actualiza su relacion con los clientes y los servicios
PRE:	model = M ; M tiene al menos un modelo ; serv = S ; vehiculos = A
POST:	model = M1 ; M1 tiene un modelo menos ; serv = S1 ; vehiculos = A1 ; C1 y S1 tienen clientes o servicios menos si el modelo eliminado tenia servicios relacionados o un cliente tenía un vehiculo de ese modelo en particular
EXCEP: }
Var
	codigoModelo:tipoClaveModelos
Inicio

	codigoModelo <- obtenerModelo(model)		{nivel 3}	

	si (confirma("Está seguro que desea eliminar este modelo?")) ent
		limpiarModelo(model, codigoModelo) 		{nivel 3}
		suprimir(model, codigoModelo)			{ADT LO}
		bajaVSM(vehiculos, serv, codigoModelo)	{nivel 3}
	finSi

Excepciones
	noHayModelos => mostrar("No existen modelos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedmiento agregarVehiculo( E/S vehiculos:tipoArbolVehiculos ; E client:tipoArbolClientes ; E model:tipoListaModelosModelos)
{Que Hace: agrega un vehiculo para un cliente determinado
PRE: vehiculos = A ; client = C ; model = M; 
POST:	vehiculos = A1 ; A1 tiene un vehiculo mas con respecto a A
EXCEP: - }
Var
	datosVehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
Inicio
	
	mostrar("Ingrese el dueño del vehiculo a agregar")
	datosVehiculo.dueño <- obtenerCliente(client) {nivel 2}

	si (esVacia(model)) entonces
		lanzar noHayModelos
	siNo
		patente <- obtenerPatente() 						{nivel 3}
		Inicio
			buscar(vehiculos, patente, datosVehiculo)	{ADT LO}

			mostrar("Vehiculo ya existe") 					{SD}
		Excepciones
			claveNoExiste => 
				Inicio
					datosVehiculo.modelo <- obtenerModelo(model)								{nivel 3}

					datosVehiculo.añoFabric <- enteroMayorACero("Ingrese año de fabricacion")	{SC}

					crear(datosVehiculo.manten)													{ADT LO}
					insertar(vehiculos, patente, datosVehiculo)									{ADT ABB}
										
				Fin
		Fin	
	finSi		
Excepciones
	ArbolLleno => mostrar("No se puede agregar un vehículo en este momento. Intente nuevamente más tarde")
	noHayClientes => mostrar("No hay clientes. Agregue uno e intente nuevamente")
	noHayModelos => mostrar("No existen modelos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada

Fin

procedimiento modificarVehiculo(E/S vehiculos:tipoArbolVehiculos ; E client:tipoArbolCLientes ; E model:tipoListaModelos)
{Que Hace: modifica los vehiculos pertenecientes a un cliente en particular
PRE: vehiculos = A ; client = C; model = M;
POST: vehiculos = A1 ; A1 tiene cambios con respecto a A segun lo hay deseado el usuario
EXCEP: - }
Var
	datosVehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
Inicio
	patente <- obtenerVehiculo(vehiculos)		{nivel 3}
	buscar(vehiculos, patente, datosVehiculo)
	modifVehiculo(datosVehiculos){nivel 3}
	modificar(vehiculos, patente, datosVehiculo)	{ADT ABB}

Excepciones
	noHayVehiculos => mostrar("No existen vehiculos. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedimiento quitarVehiculo(E/S client:tipoArbolClientes ; E dni:tipoClaveClientes ; E/S serv:tipoListaServicios)
{Que Hace: elimina un vehiculo de un cliente
PRE: client = C ; dni = K ; K pertenece a C ; serv = S
POST:	client = C1 ; C1 tiene un vehiculo menos segun haya deseado el usuario
EXCEP: - }
Var
	datosVehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos

Inicio
	
	//recuperamos el vehiculo
	patente <- obtenerVehiculo(datosCliente.vehiculos)		{nivel 3}
	limpiarVehiculo(vehiculos, patente)						{nivel 3}
	
	//eliminamos dicho vehiculo
	suprimir(vehiculos, patente)							{ADT ABB}


	//actualizamos referencias cruzadas en servicios
	bajaSV(serv, patente)									{nivel 3}

Excepciones
	cancelarIngreso => nada
Fin



procedimiento agregarServicio(E/S serv:tipoListaServicios ; E client:tipoArbolClientes ; E model:tipoListaModelos ; E/S vehiculos:tipoArbolVehiculos )
{Qué Hace: agrega un nuevo servicio realizado a un vehiculo en particular
PRE:	serv = S ; client = C ; model = M ; vehiculos = A
POST:	serv = S1 ; S1 tiene un nuevo servicio según lo haya querido el usuario
EXCEP:	}
Var
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	datosCliente:tipoInfoClientes
Inicio
	//gener codigo de servicio
	codigoServicio <- generarCodigoServicio(serv)									{nivel 3}

	//obtener cliente
	datosServicio.dniCliente <- obtenerCliente(client) 								{nivel 2}

	datosServicio.dominio <- obtenerVehiculo(datosServicio.dniCliente, vehiculos)	{nivel 3}

	//obtener etapa de mantenimiento, verificando que haya
	datosServicio.etapa <- obtenerEtapa(model, vehiculos, datosServicio.dominio)	{nivel 3}

	//obtener kilometraje real, verificando que no sea menor al de la etapa de calendario, ni mayor a la que sigue
	datosServicio.kmReal <- obtenerKmReal(model, vehiculos, datosServicio.dominio, datosServicio.etapa)								{nivel 3}

	//obtener fecha del mantenimiento
	 obtenerFecha(datosServicio.fecha)				{nivel 3}

	//obtener precio final del mismo, verificando que no sea menor al establecido en el calendario
	datosServicio.precioFinal <- obtenerPrecioFinal(model, datosServicio.etapa)

	insertar(serv, codigoServicio, datosServicio)									{ADT LO}

	altaSV(vehiculos, codigoServicio, datosServicio)								{nivel 3}

Excepciones
	errorAlAgregarServicio, listaLLena => mostrar("No se puede agregar un servicio en este momento. Intente nuevamente más tarde")		{SC}
	noHayEtapas => mostrar("El modelo seleccionado no posee etapas en su calendario de mantenimientos. Agregue una e intente nuevamente")		{SC}
	noHayClientes => mostrar("No hay clientes agregados. Agregue uno e intente nuevamente")		{SC}
	noHayVehiculos => mostrar("El cliente no tiene vehiculos a su nombre. Agregue uno e intente nuevamente")	{SC}
	cancelarIngreso => nada

Fin

procedimiento modificarServicio(E/S serv:tipoListaServicios; E/S client:tipoArbolClientes ; E model:tipoListaModelos ; E/S vehiculos:tipoArbolVehiculos)
{Qué Hace: modifica los datos de un servicio de mantenimiento en particular
PRE: serv = S ; client = C ; model = M ; vehiculos = A 
POST: serv = S1 ; client = C1 ; model = M1 ; vehiculos = A1 ; S1, A1 tienen cambios con respecto a S1 y A1 segun lo haya deseado el usuario
EXCEP:	- }
Var
	viejoDominio:tipoClaveVehiculos
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	opc:entero
Inicio
	
	codigoServicio <- obtenerServicio(serv)							{nivel 3}
	recuClave(serv,codigoServicio, datosServicio)					{ADT LO}
	repetir
		Inicio
			menuModifServicio()			
			opc <- 0
			//ESTE SEGUN EVITA INCONSISTENCIAS A LA HORA DE CAMBIAR DATOS DEL SERVICIO
			segun opc hacer
				1: opc <- 2
				2: Inicio
						opc <- 3
						viejoDominio <- datosServicio.dominio 			{SC}
					Fin
				3: opc <- 4
				4: opc <- 6
				siNo: ingresar(opc)
			finSegun
			segun opc hacer
				1:  datosServicio.dniCliente <- obtenerCliente(client)										{nivel 2}
				2:  datosServicio.dominio <- obtenerVehiculo(vehiculos, datosServicio.dniCliente) 			{nivel 3}
				3:	obtenerEtapaValida(model, vehiculos, datosServicio.dominio, etapa) 						{nivel 3}
				4:	obtenerFecha("Fecha del servicio", datosServicio.fecha)									{nivel 3}
				5:	obtenerPrecioFinal(model, datosServicio.etapa, datosServicio.precioFinal)				{nivel 3}
				6: 	obtenerKmReal(model, vehiculos, datosServicio.dominio, datosServicio.etapa)				{nivel 3}
			finSegun
		Excepciones
			cancelaIngreso => nada
		Fin
	hasta (opc = 7)

	modificar(serv, codigoServicio, datosServicio)

	si viejoDominio <> datosServicio.dominio entonces
		bajaSV(vehiculos, codigoServicio, viejoDominio)
	finSi

Excepciones
	noHayServicios => mostrar("No existen servicios. Agregue uno e intente nuevamente")
	cancelarIngreso => nada
Fin

procedimiento quitarServicio(E/S serv:tipoListaServicios; E/S vehiculos:tipoArbolVehiculos)
{Qué Hace: elimina un servicio
PRE: serv = S; client = C
POST: serv = S1 ; client = C1; S1 es distinto de S y C1 distinto de C según lo haya decidido el usuario
EXCEP: }
Var
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
Inicio

	codigoServicio <- obtenerServicio(serv)						{nivel 3}
	recuClave(serv, codigoServicio, datosServicio)				{ADT LO}
	suprimir(serv, codigoServicio)								{ADT LO}
	bajaSV(vehiculos, codigoServicio, datosServicio.dominio)	{nivel 3}

Excepciones
	noHayServicios => mostrar("No existen servicios. Agregue uno e intente nuevamente mas tarde")
	cancelarIngreso => nada
Fin 

funcion obtenerCliente(E client:tipoArbolClientes):tipoClaveClientes
{Qué Hace: devuelve un dni correspondiente a un cliente existente
PRE: client = C
POST: obtenerCliente = D ; D pertenece a C
Excep: 	noHayClientes
		ingresoCancelado}
Var
	valido:logico
	dni:tipoClaveClientes
	i:tipoInfoClientes
Inicio
	valido <- F
	si(esVacio(client)) entonces
		lanzar noHayClientes				{SC}
	siNo
		repetir
			ingresar(dni)					{SC}
			si dni = 0 entonces
				lanzar ingresoCancelado		{SC}
			siNo
				Inicio
					buscar(client, dni,i)	{ADT ABB}
					valido <- V 			{SC}
				Excepciones
					claveNoExiste => nada	{SC}
				Fin
			finSi
		hasta valido
	finSI
	obtenerCliente <- dni 					{SC}
Fin

procedimiento mantenPorCliente(E client:tipoArbolClientes ; E serv:tipoListaServicios)
{Qué Hace: muestra por pantalla los mantenimientos realizados por un mismo cliente
PRE: client = C ; serv = S
POST: - 
EXCEP:}
Var
	total:entero
	sigo:logico
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	dni:tipoClaveClientes
	datosCliente:tipoInfoClientes
Incio
	
	total <- 0																{SC}
	dni <- obtenerCliente(client)											{nivel 2}
	buscar(client, dni, datosCliente)										{ADT ABB}
	sigo <- V 																{SC}

	recuPrim(serv, codigoServicio)											{ADT LO}
	mostrarCabeceraMantenPorCliente(datosCliente.nombre)					{nivel 3}
	
	mientras sigo hacer
		Inicio
			recuClave(serv, codigoServicio, datosServicio)					{ADT LO}
			si (datosServicio.dniCliente = dni)	entonces			
				mostrarDatosServicio(datosServicio,codigoServicio)			{nivel 3]
				total <- total +1 											{SC}
			finSi
			recuSig(serv, codigoServicio, codigoServicio)					{ADT LO}
		Excepciones
			claveEsUltima => sigo <- F 										{SC}
		Fin
	finMientras
	
	mostrar("TOTAL: ", total)												{SC}

Excepciones
	cancelarIngreso => nada
	noHayClientes => mostrar("No existen clientes. Agregue por lo menos uno para poder realizar esta consulta")
	listaVacia => mostrar("No existen servicios realizados. Agregue por lo menos uno para poder realizar esta consulta")
Fin


procedimiento mantPorModelo(E model:tipoListaModelos ; E serv:tipoListaServicios ; E vehiculos:tipoArbolVehiculos)
{Qué Hace: muestra por pantalla los mantenimientos realizados para un mantenimiento en particular
PRE: model = M ; serv: S ; client = C
POST: -
EXCEP: - }
Var
	total:entero
	sigo:logico
	codigoModelo:tipoClaveModelos
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	datosVehiculo:tipoInfoVehiculos
	datosModelos:tipoInfoModelos
Inicio
	codigoModelo <- obtenerModelo(model)	{nivel 3}

	recuPrim(serv, codigoServicio)			{ADT LO}

	sigo <- V
	total <- 0

	recuClave(model,codigoModelo, datosModelo)
	mostrarEncabezadoMantModelo(datosModelo.nombre)			{nivel 3}
	mientras sigo hacer
		Inicio
			//recupero los datos del servicio
			recuClave(serv, codigoServicio, datosServicio)							{ADT LO}
			//busco en el arbol de vehiculos
			buscar(vehiculos, datosServicio.dominio, datosVehiculo)	{ADT LO}
			
			//si el modelo coincide, muestro y contabilizo
			si (datosVehiculo.modelo = codigoModelo) entonces
				mostrarDatosServicioyDNI(datosServicio)	{nivel 3}
				total <- total + 1														{SC}
			finSI

			recuSig(serv, codigoServicio, codigoServicio)								{ADT LO}
		Excepciones
			claveEsUltima => sigo <- F 													{SC}
		Fin
	finMientras

	mostrar("TOTAL: ", total)															{SC}
Excepciones
	noHayModelos => mostrar("No existen Modelos. Agregue por lo menos uno e intente nuevamente")
	listaVacia => mostrar("No existen servicios. Agregue por lo menos uno e intente nuevamente")
Fin

procedimiento datosClientesSinMant(E client:tipoArbolClientes ; E serv:tipoListaServicios)
{Qué Hace: muestra por pantalla los datos de los clientes sin mantenimientos
PRE: client = C ; serv = S
POST: - 
EXCEP: - }
Var
	muestro:logico
	total:entero
	sigo:logico
	colaClientes:tipoColaClientes
	dni:tipoClaveClientes
	datosCliente:tipoInfoClientes
Inicio
	crear(colaClientes)
	muestro <- V
	total <- 0	
	inOrder(client, colaClientes)										{ADT ABB}

	mostrarEncabezadoClientSinMant()									{nivel 3}


	mientras no(esVacia(colaClientes)) hacer
		frente(colaClientes, dni)										{ADC Cola}

		recuPrim(serv, codigoServicio)									{ADT LO}
		sigo <- V

		mientras sigo hacer
			Inicio
				recuClave(serv, codigoServicio, datosServicio)			{ADT LO}
				muestro <- muestro y (dni = datosServicio.dniCliente)	{SC}

				recuSig(serv, codigoServicio, codigoServicio)			{ADT LO}
			Excepciones
				claveEsUltima => sigo <- F
			Fin
		finMientras

		si muestro entonces
			buscar(client, dni, datosCliente)
			mostrarDatosCliente(dni, datosCliente)
			total <- total + 1
		finSi

		desencolar(colaClientes)										{ADT Cola}
	finMientras
	mostrar("TOTAL: ", total)											{SC}
Excepciones

Fin


funcion menuVehiculos()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de vehiculos
PRE: -
POST: menuVehiculos = O ; O es una opción válida
EXCEP: - }
Inicio

	mostrar("Seleccione una opcion")		{SC}
	mostrar("1 - Agregar un Vehículo")		{SC}
	mostrar("2 - Modificar un Vehículo")	{SC}
	mostrar("3 - Quitar un Vehículo")		{SC}
	mostrar("4 - Salir")

	menuVehiculos <- enteroEnRango("Ingrese su opcion",1,4)	{SC}
Fin


funcion menuClientes()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de clientes
PRE: -
POST: menuClientes = O ; O es una opcion valida
EXCEP: -}

Inicio
	mostrar("Seleccione una Opcion")	{SC}
	mostrar("1 - Agregar Cliente")		{SC}
	mostrar("2 - Modificar Cliente")	{SC}
	mostrar("3 - Quitar Cliente")		{SC}
	mostrar("4 - Salir") 				{SC}

	menuClientes <- enteroEnRango("Ingrese su opcion",1,4)	{SC}
Fin

funcion menuServicios()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de clientes
PRE: -
POST: menuServicios = O ; O es una opción valida
EXCEP: -}

Inicio
	mostrar("Seleccione una Opcion")	{SC}
	mostrar("1 - Agregar Servicios")	{SC}
	mostrar("2 - Modificar Servicios")	{SC}
	mostrar("3 - Quitar Servicios")		{SC}
	mostrar("4 - Salir") {SD}

	menuServicios <- enteroEnRango("Ingrese su opción",1,4)	{SC}
Fin 

funcion menuConsultas()
{Qué Hace: muestra el menu con las opciones correspondientes al ABM de clientes
PRE: -
POST: menuConsultas = O ; O es una opción valida
EXCEP: -}

Inicio
	mostrar("Seleccione una Opcion")									{SC}
	mostrar("1 - Consultar mantenimientos por cliente")					{SC}
	mostrar("2 - Consultar mantenimientos por modelos")					{SC}
	mostrar("3 - Consultar datos de clientes sin mantenimientos")		{SC}
	mostrar("4 - Salir") 												{SC}

	menuConsultas <- enteroEnRango("Ingrese su opción",1,4)				{SC}	
Fin

