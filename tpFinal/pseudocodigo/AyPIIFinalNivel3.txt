NIVEL 3 


menuModifServicio()
{Qué Hace: muestra el menu con las opciones para modificar un servicio
PRE: -
POST: -
EXCEP: -}
Inicio
	mostrar("Modificar Servicio")
	mostrar("1 - Cambiar Cliente")
	mostrar("2 - Cambiar vehiculo (dominio)")
	mostrar("3 - Cambiar etapa de mantenimiento")
	mostrar("4 - Cambiar Fecha")
	mostrar("5 - Cambiar Precio final")
	mostrar("6 - Cambiar kilometraje")
	mostrar("7 - Volver al menu anterior")
Fin



procedimiento actualizarSC(E/S serv:tipoLista, E viejoDni, dni:tipoClaveClientes)
{Que Hace: actualiza el dni de un cliente en el listado de servicio
PRE: serv = S ; viejoDni = T ; dni = R
POST: serv = S1; S1 podria tener en los servicios con dniCliente = R en lugar de dniCliente = T
EXCEP: }
Var
	datosServicio:tipoInfoServicios
	codigoServicio:tipoClaveServicios
	sigo:logico
Inicio
	si (no(esVacia(serv))) entonces		{ADT LO}
		sigo <- V
		recuPrim(serv, codigoServicio) {ADT LO}

		mientras sigo hacer
			Inicio
				recuClave(serv, codigoServicio, datosServicio) {ADT LO}
				
				si (datosServicio.dniCliente = viejoDni) entonces
					datosServicio.dniCliente <- dni 				{SC}
					modificar(serv, codigoServicio, datosServicio) 	{ADT LO}
				finSi


				recuSig(serv, codigoServicio, codigoServicio) {ADT LO}
			Excepciones 
				claveEsUltima => sigo <- F
			Fin
		finMientras
	finSi
Fin

procedimiento limpiarVehiculo(E/S vehiculos:tipoArbolVahiculos ; E patente:tipoClaveVehiculos)
{Qué Hace: Vacía las estructuras de datos pertenecientes a un vehículo
PRE: vehiculos = A ; patente = P
POST: vehiculos = A1 ; A1 en A con las estructuras pertenecientes a P vacías
EXCEP: - }
Var
	datosVehiculo:tipoInfoVehiculos
Inicio
	buscar(vehiculos, patente, datosVehiculo)		{ADT ABB}

	vaciar(datosVehiculo.manten)					{ADT LO}

	modificar(vehiculos, patente,datosVehiculo)		{ADT ABB}
Fin

procedimiento bajaSC(E/S serv:tipoListaServicios ; E dni:tipoClaveClientes)
{Qué Hace: da de baja los servicios a nombre de un cliente en particular
PRE: serv = S ; dni = D
POST:	serv = S1 ; S1 en S menos los servicios con dniCliente = D, que fueron eliminados
EXCEP: }
Var
	siguiente:tipoClaveServicios
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	sigo:logico
Inicio
	sigo <- V
	recuPrim(serv, codigoServicios)						{ADT LO}

	Inicio
		recuSig(serv, codigoServicio, siguiente)		{ADT LO}
	Excepciones
		claveEsUltima => siguiente <- codigoServicio
	Fin

	mientras sigo hacer
		Inicio
			recuClave(serv, codigoServicio, datosServicio)	{ADT LO}

			si datosServicio.dniCliente = dni entonces
				suprimir(serv, codigoServicio)				{ADT LO}
				codigoServicio <- siguiente

				Inicio
					recuSig(serv, siguiente, siguiente)		{ADT LO}
				Excepciones
					claveEsUltima => nada
				Fin
			siNo
				recuSig(serv, codigoServicio, codigoServicio)	{ADT LO}
			finSi
		Excepciones
			claveNoExiste, claveEsUltima => sigo <- F
		Fin
	finMientras
Excepciones

Fin

funcion generarCodigoModelo(E model:tipoListaModelos): tipoClaveModelos
{Qué Hace: genera el codigo de modelo correspondiente a un nuevo modelo
PRE: model = M
POST:	generarCodigoModelo = CM ; CM es un codigo de modelo valido
EXCEP: }
Var
	codigo:tipoClaveModelos
Inicio
	si (esVacia(model)) entonces
		generarCodigoModelo <- 1
	siNo
		recuUlt(model, codigo)
		generarCodigoModelo <- codigo + 1
	finSi	
Fin

funcion obtenerModelo(E model:tipoListaModelos):tipoClaveModelos
{Qué Hace: obtiene un codigo válido de modelo
PRE: model = M
POST: obtenerModelo=N y N es un modelo valido
EXCEP: noHayModelos,cancelarIngreso}
Var
	ok:logico
	modelo:tipoClaveModelos
	dm:tipoInfoModelos
Inicio
	
	si(esVacia(model)) entonces {ADT LO}
		lanzar noHayModelos				{SC}
	siNo
		ok <- F {SD}
		repetir
			mostrar("Ingrese codigo de modelos (0 para cancelar ingreso)")
			ingresar(modelo)	{SC}

			si modelo = 0 entonces
				lanzar cancelarIngreso	{SC}
			siNo
				Inicio
					recuClave(model, modelo, dm)	{ADT LO}
					ok <- V 						{SC}
				Excepciones	
					claveNoExiste => mostrar("Codigo de modelo invalido")	{SC}
				Fin
			finSi
		hasta ok
	finSi

	obtenerModelo <- modelo
Fin


procedimiento bajaSMant(E/S serv:tipoListaServicios, E calendario:tipoListaCalendario)
{Qué Hace: actualiza los servicios con respecto a las etapas de mantenimiento existentes
PRE: serv = S ; calendario = F 
POST: 
EXCEP: - }
Var
	codigoServicio,siguiente:tipoClaveServicios	
	datosServicio:tipoInfoServicios
	datosEtapa:tipoInfoCalendario
	sigo:logico
Inicio
	sigo <- V 										{SC}

	recuPrim(serv, codigoServicios)					{ADT LO}

	Inicio
		recuSig(serv, codigoServicio, siguiente)		{ADT LO}
	Excepciones
		claveEsUltima => siguiente <- codigoServicio 	{SC}         
	Fin

	mientras sigo hacer
		Inicio
			recuClave(serv, codigoServicio, datosServicio)				{ADT LO}
			
			Incio
				recuClave(calendario, datosServicio.etapa, datosEtapa)	{ADT LO}
				recuSig(serv, codigoServicio, codigoServicio)			{ADT LO}
			Excepciones
				claveNoExiste => 
					Inicio
						suprimir(serv, codigoServicio)					{ADT LO}
						codigoServicio <- siguiente						{SC}

						Inicio
							recuSig(serv, siguiente, siguiente)			{ADT LO}
						Excepciones
							claveEsUltima => nada						{SC}
						Fin
					Fin
			Fin
		Excepciones
			claveNoExiste, claveEsUltima => sigo <- F 					{SC}
		Fin
	finMientras

Excepciones
	listaVacia => nada
Fin

procedimiento actualizarVS(E/S vehiculos:tipoArbolVehiculos, E serv:tipoListaServicios)
{Qué Hace: actualiza los mantenimientos de cada vehiculos con respecto a los servicios
PRE: client = C ; serv = S
POST: client = C1 ; C1 en C menos los servicios correspondientes a codigos inexistentes en S
EXCEP: - }
Var
	sigo:logico
	codigoServicio:tipoClaveServicios
	patente:tipoClaveVehiculos
	datosVehiculo:tipoInfoVehiculo
	colaVehiculos:tipoColaVehiculos
	siguiente:tipoClaveMantenimientos
	mantenimiento:tipoClaveMantenimientos
Inicio
	crear(colaVehiculos)	         	{ADT Cola}												
	inOrder(vehiculos, colaVehiculos)	{ADT Cola}

	mientras no(esVacia(colaVehiculos)) hacer	{ADT Cola}
		frente(colaVehiculos, patente)			{ADT Cola}
		desencolar(colaVehiculos)				{ADT Cola}

		buscar(vehiculos, patente, datosVehiculo)	{ADT ABB}

		Inicio
			
			recuPrim(datosVehiculo.manten, mantenimiento)	{ADT LO}
			
			Inicio
				recuSig(datosVehiculo.manten, siguiente)	{ADT LO}
			Excepciones
				claveEsUltima => siguiene <- mantenimiento
			Fin
			
			sigo <- V

			mientras sigo hacer
				Inicio
					Inicio
						recuClave(serv, mantenimiento, datosServicio)					{ADT LO}
						recuSig(datosVehiculo.manten, mantenimeinto, mantenimiento)		{ADT LO}	
					Excepciones
						claveNoExiste => 
							Inicio
								suprimir(datosVehiculo.manten, mantenimiento)			{ADT LO}
								mantenimiento <- siguiente
							Fin
					Fin

					Inicio
						recusig(datosVehiculo.manten, siguiente, siguiente)				{ADT LO}
					Excepciones
						claveEsUltima => nada
					Fin

				Excepciones
					claveEsUltima, claveNoExiste => sigo <- F
				Fin
			finMientras
		Excepciones
			listaVacia => nada
		Fin
	finMientras
Fin

procedimiento actualizarVC(E/S vehiculos:tipoArbolVehiculos ; E viejoDni,dni:tipoClaveClientes)
{Qué hace: Actualiza los vehiculos con respecto a un cambio en el dni de un cliente
PRE: vehiculos = A ; viejoDni = D ; dni = D1
POST: vehiculos = A1; A1 en A salvo los clientes en A con dni igual a D, que ahora tienen dni igual a D1
EXCEP: - }
Var
	colaVehiculos:tipoColaVehiculos
	datosVehiculo:tipoInfoVehiculos
	patente:tipoClaveVehiculos
Inicio
	crear(colaVehiculos)		{ADT Cola}
	inOrder(vehiculos, colaVehiculos)

	mientras(no(esVacia(colaVehiculos))) hacer	{ADT Cola}
		frente(colaVehiculos, patente) 					{ADT Cola}
		desencolar(colaVehiculos)						{ADT Cola}

		buscar(vehiculos, patente, datosVehiculo)

		si (datosVehiculo.dueño = viejoDni) ent
			datosVehiculo.dueño <- dni
			modificar(vehiculos, patente, datosVehiculo)
		finSi
	finMientras
Fin



procedimiento limpiarModelo(E/S model:tipoListaModelos, E codigoModelo:tipoClaveModelos)
{Que Hace: vacia las estructuras de un modelo en particular
PRE: model = M ; codigoModelo = K
POST: model = M1 ; M1 en M, salvo el modelo de codigo K que tiene ese modelo con las estructuras vacias
EXCEP: - }
Var
	datosModelo:tipoInfoModelos
Inicio
	recuClave(model, codigoModelo, datosModelo)		{ADT LO}

	vaciar(datosModelo.calendario)					{ADT LO}

	modificar(model, codigoModelo, datosModelo)		{ADT LO}
Excepciones
Fin

funcion obtenerPatente():cadena
{Que Hace:Devuelve una patente valida
PRE: - 
POST:	obtenerCadena = P ;P es una patente valida
EXCEP:	cancelarIngreso	}
Var
	letras:cadena
	numeros:entero
Inicio

	repetir
		mostrar("Ingrese letras")			{SC}
		ingresar(letras)					{SC}
		si(letras = "0") entonces
			lanzar cancelarIngreso
		finSi
	hasta ((letras <= "zzz") y (letras <= "ZZZ")) o ((letras >= "aaa") y (letras >= "AAA"))

	repetir
		mostrar("Ingrese numeros")			{SC}
		ingresar(numeros)					{SC}
	hasta ((numeros <= 999) y (numeros>= 0))

	obtenerPatente <- letras + enteroACadena(numeros)	{SC}
Excepciones

Fin

funcion obtenerVehiculo(E vehiculos:tipoArbolVehiculos):tipoClaveVehiculos
{Que Hace: devuelve un vehiculo valido de una lista de vehiculos
PRE: vehiculos = L
POST: obtenerVehiculo = A ; A pertence a  L
EXCEP: noHayVehiculos - cancelarIngreso}
Var
	ok:logico
	patente:tipoClaveVehiculos
	datosVehiculo:tipoInfoVehiculos
Inicio
	ok <- F
	si(esVacio(vehiculos)) entonces
		lanzar noHayVehiculos
	siNo
		repetir
			patente <- obtenerPatente() {nivel 3}
			Inicio
				buscar(vehiculos, patente, datosVehiculo) 					{ADT ABB}	
				ok <- V
			Excepciones
				claveNoExiste => mostrar("Vehiculo Inexistente")		{SC}
			Fin
		hasta ok
	finSi

	obtenerVehiculo <- patente 												{SC}
Excepciones
Fin

funcion obtenerVehiculoCliente(E vehiculo:tipoArbolVehiculos ; E dni:tipoClaveClientes):tipoClaveVehiculos
{Que hace: devuelve un vehiculo perteneciente a un cliente en particular
PRE: Vehiculos = A; dni = D
POST: obtenerVehiculoCliente = O ; O pertenece a A y D es dueño de O
EXCEP: - }
Var
	patente:tipoClaveVehiculos
	datosVehiculo:tipoInfoVehiculos
Inicio

	repetir
		patente <- obtenerVehiculo(vehiculos)	{nivel 3}
		buscar(vehiculos, patente, datosVehiculo)
	hasta datosVehiculo.dueño = dni

	obtenerVehiculoCliente <- patente
Fin


procedimiento bajaSV(E/S serv:tipoListaServicios; E patente:tipoClaveVehiculos)
{Que Hace: quita los servicios pertenecientes a vehiculos inexistentes
PRE: serv = S ; patente = P
POST: serv = S1 ; S1 en S menos los servicios realizados a vehiculos de patente P
EXCEP: - }
Var
	siguiente:tipoClaveServicios
	sigo:logico
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
Inicio
	
	sigo <- V
	recuPrim(serv, codigoServicios)

	Inicio
		recuSig(serv, codigoServicio, siguiente)		{ADT LO}
	Excepciones
		claveEsUltima => siguiente <- codigoServicio 	{SC}
	Fin

	mientras sigo hacer
		Inicio
			recuClave(serv, codigoServicio, datosServicio)	{ADT LO}

			si datosServicio.dominio = patente entonces
				suprimir(serv, codigoServicio)				{ADT LO}
				codigoServicio <- siguiente					{SC}

				Inicio
					recuSig(serv, siguiente, siguiente)		{ADT LO}
				Excepciones
					claveEsUltima => nada					{SC}
				Fin
			siNo
				recuSig(serv, codigoServicio, codigoServicio)	{ADT LO}
				
				Inicio
					recuSig(serv, siguiente, siguiente)
				Excepciones
					claveEsUltima => nada
				Fin
			finSi
		Excepciones
			claveNoExiste, claveEsUltima => sigo <- F 			{SC}
		Fin
	finMientras

Excepciones
	listaVacia => nada
Fin 


procedimiento bajaVC(E/S vehiculos:tipoArbolVehiculos ; E dni:tipoClaveClientes)
{Qué Hace: elimina todos lo vehiculos pertenecientes a un mismo cliente
PRE: vehiculos = A ; dni = D
POST: vehiculos = A1 ; A1 en A menos los vehiculos que pertenecían a D
EXCEP: - }
Var
	colaVehiculos:tipoColaVehiculos
	patente:tipoClaveVehiculos
	datosVehiculo:tipoInfoVehiculos
Inicio
	crear(colaVehiculos)							{ADT Cola}
	inOrder(vehiculos, colaVehiculos)				{ADT ABB}
	mientras (no(esVacia(colaVehiculos))) hacer		{ADT Cola}
		frente(colaVehiculos, patente)				{ADT Cola}
		desencolar(colaVehiculos)					{ADT Cola}

		buscar(vehiculos, patente, datosVehiculo)	{ADT ABB}

		si (datosVehiculo.dueño = dni) entonces		{SC}
			suprimir(vehiculos, patente)			{ADT ABB}
		finSi
	finMientras
Fin


funcion generarCodigoServicio(E serv:tipoListaServicios):tipoClaveServicios
{Que Hace: devuelve un nuevo codigo de servicio valido
PRE: serv = S
POST: generarCodigoServicio = K ; K es un codigo valido en S
EXCEP: - }
Var
	ok:logico
	codigo:tipoClaveServicios
Inicio
	si esVacia(serv) entonces
		codigo <- 1
	siNo
		recuUlt(serv, codigo)
		codigo <- codigo + 1
	finSi

	generarCodigoServicio <- codigo
Excepciones

Fin


funcion obtenerEtapaValida(E model:tipoListaModelos ; E vehiculos:tipoArbolVehiculos ; E dominio:tipoClaveVehiculos):tipoClaveCalendario
{Que Hace: devuelve una etapa del calendario de mantenimientos valida correspondiente a un modelo
PRE: model = M ; vehiculos = A ; dominio = D ; D pertenece a A
POST: obtenerEtapaValida = E ; E es una etapa valida al vehiculo de dominio D, perteneciente a A con modelo en M
EXCEP: noHayEtapas - cancelarIngreso}
Var
	datosModelo:tipoInfoModelos
	ok:logico
	etapa:tipoClaveCalendario
	datosEtapa:tipoInfoCalendario
	datosVehiculo:tipoInfoVehiculos
Inicio
	ok <- F

	repetir
		mostrar("Ingrese etapa de mantenimiento")
		ingresar(etapa)
		si etapa = 0 entonces
			lanzarCancelarIngreso	
		siNo
			buscar(vehiculos, patente, datosVehiculo)			{ADT ABB}
			recuClave(model, datosVehiculo.modelo, datosModelo)	{ADT LO}

			si(esVacia(datosModelo.calendario)) entonces
				lanzar noHayEtapas
			siNo
				Inicio
					recuClave(datosModelo.calendario, etapa, datosEtapa)	{ADT LO}
					ok <- V
				Excepciones
					claveNoExiste => mostrar("Etapa invalida")
				Fin
			finSi

		finSi
	hasta ok

	obtenerEtapaValida <- etapa

Fin

funcion obtenerKmReal(E model:tipoListaModelo ; E vehiculos:tipoArbolVehiculos ; E dominio:tipoClaveVehiculos; E etapa:tipoClaveCalendario):entero
{Que Hace: obtiene un kiloemtraje real para poder realizar un mantenimiento 
PRE: model = M ; vehiculos = A ; dominio = D ; etapa = T;  D pertenece a A, y el modelo del auto con dominio D pertenece a M y T es una etapa de mantenimiento valida para este
POST: obtnerKmReal = K ; K esta entre T y la proxima etapa para ese modelo
EXCEP: - }
Var
	etapaSiguiente:tipoClaveCalendario
	km:entero
	ok:logico
	datosCalendario:tipoInfoCalendario
	datosModelo:tipoInfoModelos
	datosVehiculo:tipoInfoVehiculos
Inicio
	buscar(vehiculos, dominio, datosVehiculo)							{ADT ABB}
	recuClave(model, datosVehiculo.modelo, datosModelo)					{ADT LO}

	ok <- F
	repetir
		km := enteroMayorIgualACero("Ingrese Kilometraje")
		si (km >= etapa) entonces
			Inicio
				recuSig(datosModelo.calendario, etapa, etapaSiguiente)		{ADT LO}
				si (km <= etapaSiguiente) entonces
					ok <- V 												{SC}
				siNo
					mostrar("Kilometraje Invalido")							{SC}
				finSi
			Excepciones	
				claveEsUltima => ok <- V 									{SC}
			Fin
		siNo
			mostrar("Kilometraje Invalido")
		finSi
	hasta ok

	obtenerKmReal <- km   {SC}
Fin


procedimiento altaSV(E/S vehiculos:tipoArbolVehiculos; E codigoServicio:tipoClaveServicios; E datosServicio:tipoInfoServicios)
{Que Hace: da de alta un servicio en la lista de mantenimientos de un vehiculos
PRE: client = C; codigoServicio = K ; datosServicio = S ; S es los datos del servicio K y el vehiculos al cual sele realizo el servicio K es de un cliente que esta en C
POST: client = C1 ; C1 en C mas el servicio con codigo K hecho a un vehiculo perteneciente a un cliente
EXCEP:	-	}
Var
	datosVehiculo:tipoInfoVehiculo
Inicio
	buscar(vehiculos, datosServicio.dominio,datosVehiculo)						{ADT ABB}

	insertar(datosVehiculo.manten, codigoServicio, datosServicio.precioFinal)	{ADT LO}
	
Excepciones
	listaLlena => lanzar errorAlAgregarServicio
Fin

procedimiento bajaVSM(E/S vehiculos:tipoArbolVehiculos ; E/S serv:tipoListaServicios ; E codigoModelo:tipoClaveModelos)
{Qué Hace: elimina los vehiculos de modelos inexistentes y los servicios realizados a dichos vehiculos
PRE: vehiculos = A ; serv = S ; codigoModelos = K ; K es un modelos inexistente
POST:	vehiculos = A1 ; serv = S1 ; A1 en A menos los vehiculos de modelo K, si los hubiesen ; S1 en S menos los servicios realizados a los vehiculos de modelo K, si los hubiere
EXCEP: - }
Var
	colaVehiculos:tipoColaVehiculos
	patente:tipoClaveVehiculos
	datosVehiculo:tipoInfoVehiculos
Inicio
	crear(colaVehiculos)	{ADT Cola}
	inOrder(vehiculos, colaVehiculos)	{ADT ABB}

	mientras (no(esVacia(colaVehiculos))) hacer
		frente(colaVehiculos, patente)	{ADT Cola}
		desencolar(colaVehiculos)		{ADT ABB}

		buscar(vehiculos, patente, datosVehiculo)	{ADT ABB}

		si (codigoModelo = datosVehiculo.modelo) entonces
			suprimir(vehiculos, patente)					{ADT ABB}
			bajaSV(serv, patente)							{nivel 3}
		finSi
	finMientras

Excepciones

Fin



Procedimiento mostrarCabeceraMantenPorCliente(E nomCli:cadena)
{que hace: muestra la cabecera de los mantenimientos de un cliente
pre: nomCli=N y N no es vacio
pos: -
exp: -}

Inicio
	mostrar("Mantenimientos realizados por el cliente", nomCli)												{SD}
	mostrar("Codigo servicio 	Dominio		etapa 	Km Real 	Fecha de Mantenimiento 		Precio Final")	{SD}
FinProcedimiento

Procedimiento mostrarDatosServicio(E datosServicio:tipoInfoServicios, E codigoServicio:tipoClaveServicios)
{que hace: muestra los datos de servicio de mantenimiento realizado por un cliente
pre: datosServicio=D y D tiene que tener datos validos; codigoServicio=C y tiene un codigo valido
pos: -
exp: -}


Inicio
	mostrar(codigoServicio, "   " , datosServicio.Dominio, "  ", datosServicio.etapa, "   ", datosServicio.KmReal, "  ", datosServicio.fecha,"   ", datosServicio.precioFinal)	{SD}
FinProcedimiento

Procedimiento mostrarEncabezadoMantModelo (E nomMod:cadena ;  E dniCliente:entero)
{que hace: muestra el encabezado de los mantenimientos por modelo
pre: nomMod=N y N tiene un nombre de modelo valido
pos: -
exp: -}

Inicio
	mostrar("Mantenimientos realidos por el modelo", nomMod){SD}
	mostrar("Codigo servicio 	Dni Dueño 	Dominio		etapa 	Km Real 	Fecha de Mantenimiento 		Precio Final")		{SD}
FinProcedimiento

Procedimiento mostrarEncabezadoClientSinMant()
{que hace: muestra el encabezado de los clientes sin mantenimientos
pre:-
pos:-
exp:-}

Inicio
	mostrar("Datos de los clientes que no han realizado ningun mantenimiento en sus vehiculos") 	{SD}
	mostrar("DNI 	Nombre 	  Telefono 	 E-Mail ") 													{SD}
FinProcedimiento

Procedimiento mostrarDatosCliente(E dni:entero ; E datosCliente:tipoInfoClientes)
{que hace: muestra los datos de los clientes que no han realizado mantenimientos
pre: datosCliente=C y C tiene datos validos
pos: 
exp: - }

Inicio
	mostrar(dni,"  ", datosCliente.nombre,"  ", datosCliente.Telefono, "  ", datosCliente.email)	{SD}
FinProcedimiento

Funcion obtenerServicio(E serv:tipoListaServicios)tipoClaveServicios
{que hace: obtiene un codigo valido de servicio
pre: servicio=S 
pos: obtenerServicio=OS y OS es un codigo valido
exp: noHayServicios- cancelarIngreso}

Var
	ok:logico
	claServ:tipoClaveServicios
	infoSer:tipoInfoServicios

Inicio
	si(esVacia(serv)) entonces				{ADT LO}
		lanzar noHayServicios				{SC}
	siNo
		ok <- F
		repetir
			mostrar("Ingrese codigo de servicios (0 para cancelar ingreso)") 	{SD}
			ingresar(claServ)													{SC}
			si claServ = 0 entonces
				lanzar cancelarIngreso											{SC}
			siNo
				Inicio
					recuClave(serv, claServ, infoSer)							{ADT LO}
					ok <- V 													{SC}
				Excepciones	
					claveNoExiste => mostrar("Codigo de servicio invalido")		{SC}
				Fin
			finSi
		hasta (ok)
	finSi
	obtenerServicio <- claServ 													{SD}
FinFuncion

funcion obtenerPrecioFinal (E model:tipoListaModelos; E vehiculos:tipoArbolVehiculos ; E datosServicio:tipoInfoServicios):entero
{que hace: obtiene un precio final valido respecto a la etapa de calendario
pre: model:M y etapa=E 
pos: precio=P y P es un precio valido
exp: }
Var
	datosEtapa:tipoInfoCalendario
	ok:logico
	precio:entero
Inicio
	ok <-f	
	Repetir
		Mostrar("Ingrese precio final")						{SC}
		Ingresar(precio)									{SC}
		recuClave(model, etapa, datosEtapa)					{ADT LO}
		Si (precio >= datosEtapa) entonces					{SC}
			mostrar("Precio correcto")						{SC}
			ok <-v 											{SC}
		Sino 
			Mostrar("Precio Incorrecto. Vuelva a ingresar")
		Finsi
	Hasta(ok)
FinProcedimiento

procedimiento obtenerFecha(S fecha:tipoFecha)
{Que hace: obtiene la fecha en la que se realizo el servicio
pre: -
pos: obtenerFecha=N y N es una fecha valida}
Inicio
	Repetir
		mostrar("Ingrese Fecha")				{SC}
		fecha.dia <- enteroEnRango("Dia",1,31)	{SC}
		fecha.mes <- enteroEnRango("Mes",1,12)	{SC}
		fecha.anio <- enteroMayorACero("Año")	{SC}
	Hasta esFechaCorrecta(fecha)	{SC}
Fin

Procedimiento modifModelo(E/S datosModelos:tipoInfoModelos)
{Que hace: modifica lo datos del modelo seleccionado por el usuario
pre: datosModelos=M 
pos: datosModelos=M1
exp:- }
Var
	opc:entero

Inicio
	repetir
		opc <- menuModifModelo()	{nivel 4}
		segun (opc) hacer
			1: datosModelo.nombre <- textoNoVacio("Ingrese Nombre de Modelo")	{SC}
			2: ABMCalendario(datosModelo.calendario)							{nivel 4}
		finSegun
	hasta (opc = 3)

Fin 

Procedimiento modifCliente(E/S datosClientes:tipoInfoClientes)
{Que hace: modifica los datos del cliente seleccionado por el usuario
pre: datosClientes=C
pos: datosClientes=C1
exp:- }

Var
	opc:entero

Inicio
	repetir
		opc <- menuModifClient()	{nivel 4}
							
		segun opc hacer
			1:dni <- EnteroMayorACero("Ingrese DNI")							{SD}
			2:datosCliente.nombre <- textoNoVacio("Ingrese Nombre")				{SC}
			3:datosCliente.telefono <- EnteroMayorACero("Numero de telefono")	{SC}
			4:datosClientecliente.email <- obtenerEmail("Ingrese E-Mail")						{nivel 4}
		finSegun
	hasta (opc = 5)
Fin

Procedimiento modifVechiculo(E/S datosVehiculo:tipoInfoVehiculos)
{Que hace: modifica los datos del vehiculo seleccionado por el usuario
pre: datosClientes=V
pos: datosClientes=V1
exp:- }

Var
	opc:entero

Inicio

	repetir
		opc <- menuModifVehiculo()				{nivel 4}

		segun (opc) hacer
			1: datosVehiculo.modelo <- obtenerModelo(model)										{nivel 3}
			2: datosVehiculo.añoFabric <- enteroMayorACero("Ingrese nuevo año de fabricacion")	{SC}
			3: datoVehiculo.dueño <- obtenerCliente(client)										{nivel 2}
		finSegun
	hasta (opc = 4)
Fin