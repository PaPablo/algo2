NIVEL 3 

funcion obtenerEmail(E cad:cadena)
{Que Hace: devuelve una direccion de email valida
PRE: cad = C 
POST: obtenerEmail = M ; M es un email valido
EXCEP: }
Var
	ok:logico
	email:cadena
	i:entero
Inicio
	ok <- V

	repetir 
		ingresar(cad)
		desde i <- 1 hasta long(cad) hacer
			ok <- ok y (cad[i] = @) //esto podria ser mejor 
		finDesde
	hasta ok

Fin

procedimiento actualizarSC(E/S serv:tipoLista, E viejoDni, dni:tipoClaveClientes)
{Que Hace: actualiza el dni de un cliente en el listado de servicio
PRE: serv = S ; viejoDni = T ; dni = R
POST: serv = S1; S1 podria tener en los servicios con dniCliente = R en lugar de dniCliente = T
EXCEP: }
Var
	datosServicio:tipoInfoServicios
	codigoServicio:tipoClaveServicios
	sigo:logico
Inicio
	si (no(esVacia(serv))) entonces
		sigo <- V
		recuPrim(serv, codigoServicio) {ADT LO}

		mientras sigo hacer
			Inicio
				recuClave(serv, codigoServicio, datosServicio) {ADT LO}
				
				si (datosServicio.dniCliente = viejoDni) entonces
					datosServicio.dniCliente <- dni
				finSi

				suprimir(serv, codigoServicio) {ADT LO}
				insertar(serv, codigoServicio, datosServicio) {ADT LO}

				recuSig(serv, codigoServicio, codigoServicio) {ADT LO}
			Excepciones 
				claveEsUltima => sigo <- F
			Fin
		finMientras
	finSi
Excepciones
	listaLlena => lanzar errorEnModificarCliente
Fin

procedimiento limpiarVehiculo(E/S vehiculos:tipoListaVahiculos ; E patente:tipoClaveVehiculos)
{Qué Hace: Vacía las estructuras de datos pertenecientes a un vehículo
PRE: vehiculos = A ; patente = P
POST: vehiculos = A1 ; A1 en A con las estructuras pertenecientes a P vacías
EXCEP:
}
Var
	datosVehiculo:tipoInfoVehiculos
Inicio
	recuClave(vehiculos, patente, datosVehiculo)	{ADT LO}

	vaciar(datosVehiculo.manten)					{ADT LO}

	modificar(vehiculos, patente,datosVehiculo)		{ADT LO}
Fin

procedimiento limpiarCliente (E/S client:tipoArbolCLientes ; E dni:tipoClaveClientes)
{Qué Hace: vacía todas las estructuras de datos pertenecientes a un cliente
PRE: client = C; dni = D ; D pertenece a C
POST: client = C1 ; C1 en C con las estructuras correspondientes al cliente D vacías
EXCEP:	
}
Var
	sigo:logico
	datosCliente:tipoInfoClientes
	patente:tipoClaveVehiculo
	datosVehiculo:tipoInfoVehiculo
Incio
	//recuperar el cliente a limpiar
	buscar(client, dni, datosCliente)

	sigo <- V

	//recorrer la lista de vehiculos y por cada uno limpiar la lista de mantenimientos
	recuPrim(datosCliente.vehiculos, patente)
	mientras sigo hacer
		Inicio
			recuClave(datosCliente.vehiculos, patente, datosVehiculo)	
			
			//vacío la lista de mantenimientos
			vaciar(datosVehiculo.manten)
			//actualizo en la lista
			modificar(datosCliente, patente, datosVehiculo)
			
			recuSig(datosCliente.vehiculos, patente, patente)
		Excepciones
			claveEsUltima => sigo <- F
		Fin
	finMientras

	//vacío la lista de vehículos
	vaciar (datosCliente.vehiculos)

	modificar(client, dni, datosCliente)
Excepciones
	
Fin

procedimiento bajaSC(E/S serv:tipoListaServicios ; E dni:tipoClaveClientes)
{Qué Hace: da de baja los servicios a nombre de un cliente en particular
PRE: serv = S ; dni = D
POST:	serv = S1 ; S1 en S menos los servicios con dniCliente = D, que fueron eliminados
EXCEP: }
Var
	siguiente:tipoClaveServicios
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	sigo:logico
Inicio
	sigo <- V
	recuPrim(serv, codigoServicios)

	Inicio
		recuSig(serv, codigoServicio, siguiente)
	Excepciones
		claveEsUltima => siguiente <- codigoServicio
	Fin

	mientras sigo hacer
		Inicio
			recuClave(serv, codigoServicio, datosServicio)

			si datosServicio.dniCliente = dni entonces
				suprimir(serv, codigoServicio)
				codigoServicio <- siguiente

				Inicio
					recuSig(serv, siguiente, siguiente)
				Excepciones
					claveEsUltima => nada
				Fin
			siNo
				recuSig(serv, codigoServicio, codigoServicio)
			finSi
		Excepciones
			claveNoExiste, claveEsUltima => sigo <- F
		Fin
Excepciones

Fin

funcion generarCodigoModelo(E model:tipoListaModelos)
{Qué Hace: genera el codigo de modelo correspondiente a un nuevo modelo
PRE: model = M
POST:	generarCodigoModelo = CM ; CM es un codigo de modelo valido
EXCEP: }
Var
	codigo:tipoClaveModelos
Inicio
	si (esVacia(model)) entonces
		generarCodigoModelo <- 1
	siNo
		recuUlt(model, codigo)
		generarCodigoModelo <- codigo + 1
	finSi	
Fin

funcion obtenerModelo(E model:tipoListaModelos)
{Qué Hace: obtiene un codigo válido de modelo
PRE: model = M
POST:
EXCEP: noHayModelos,cancelarIngreso}
Var
	ok:logico
	modelo:tipoClaveModelos
	dm:tipoInfoModelos
Inicio
	
	si(esVacia(model)) entonces
		lanzar noHayModelos
	siNo
		ok <- F
		repetir
			mostrar("Ingrese codigo de modelos (0 para cancelar ingreso)")
			ingresar(modelo)

			si modelo = 0 entonces
				lanzar cancelarIngreso
			siNo
				Inicio
					recuClave(model, modelo, dm)
					ok <- V
				Excepciones
					claveNoExiste => mostrar("Codigo de modelo invalido")
				Fin
			finSi
		hasta ok
	finSi

	obtenerModelo <- modelo
Fin

procedimiento menuModifModelo()
{Qué Hace: muestra un menu con las opciones para modificar los datos de un modelo
PRE:
POST:
EXCEP:}
Inicio
	mostrar("	MODIFICAR MODELO")
	mostrar("1 - Moficar Nombre")
	mostrar("2 - Agregar, modificar o quitar etapas del calendario de su calendario de mantenimientos")
	mostrar("3 - Volver al menú anterior")
Fin

procedimiento ABMCalendario(E/S calendario:tipoListaCalendario)
{Qué Hace: Permite agregar, quitar o modificar etapas del calendario de mantenimientos de un modelo
PRE: calendario = C
POST: calendario = C1 ; C1 en C según lo haya querido el usuario
EXCEP: }
Var
	opc:entero
Incio
	repetir
		mostrarMenuCalendario()				{nivel 4}
		ingresar(opc)						{SC}

		segun opc hacer
			1:agregarEtapa(calendario)		{nivel 4}
			2:modificarEtapa(calendario)	{nivel 4}
			3:quitarEtapa(calendario)		{nivel 4}
		finSegun
	hasta opc = 4							{SC}
Excepciones

Fin

procedimiento bajaSMant(E/S serv:tipoListaServicios, E calendario:tipoListaCalendario)
{Qué Hace: actualiza los servicios con respecto a las etapas de mantenimiento existentes
PRE: serv = S ; client = C ; calendario = F 
POST: 
EXCEP: - }
Var
	siguiente:tipoClaveServicios
	datosEtapa:tipoInfoCalendario
	codigoServicio:tipoClaveServicios
	datosServicio:tipoInfoServicios
	sigo:logico
Inicio
	sigo <- V 										{SC}

	recuPrim(serv, codigoServicios)					{ADT LO}

	Inicio
		recuSig(serv, codigoServicio, siguiente)		{ADT LO}
	Excepciones
		claveEsUltima => siguiente <- codigoServicio 	{SC}         
	Fin

	mientras sigo hacer
		Inicio
			recuClave(serv, codigoServicio, datosServicio)				{ADT LO}
			
			Incio
				recuClave(calendario, datosServicio.etapa, datosEtapa)	{ADT LO}
				recuSig(serv, codigoServicio, codigoServicio)			{ADT LO}
			Excepciones
				claveNoExiste => 
					Inicio
						suprimir(serv, codigoServicio)					{ADT LO}
						codigoServicio <- siguiente						{SC}

						Inicio
							recuSig(serv, siguiente, siguiente)			{ADT LO}
						Excepciones
							claveEsUltima => nada						{SC}
						Fin
					Fin
			Fin
		Excepciones
			claveNoExiste, claveEsUltima => sigo <- F 					{SC}
		Fin
	finMientras

Excepciones

Fin

procedimiento actualizaVS(E/S client:tipoArbolClientes, E serv:tipoListaServicios)
{Qué Hace: actualiza los vehiculos con respecto a los servicios
PRE: client = C ; serv = S
POST: client = C1 ; C1 en C menos los servicios correspondientes a codigos inexistentes en S
EXCEP: - }
Var
	sigo:logico
	codigoServicio:tipoClaveServicios
	dni:tipoClaveClientes
	datosCliente:tipoInfoClientes
	colaClientes:tipoColaClientes
	patente:tipoClaveVehiculo
	datosVehiculo:tipoInfoVehiculo

Inicio
	crear(colaClientes)				{ADT Cola}			
	inOrder(client, colaClientes)	{ADT ABB}

	mientras(no(esVacia(colaClientes))) hacer
		frente(colaClientes, dni)	{ADT Cola}
		desencolar(colaClientes)	{ADT Cola}

		buscar(client, dni, datosCliente)			{ADT ABB}

		sigo <- V
		recuPrim(datosCliente.vehiculos, patente)	{ADT LO}
		mientras sigo hacer 
			Inico
				recuClave(datosCliente.vehiculo, patente, datosVehiculo)	{ADT LO}

				bajaMantS(datosVehiculo.manten, serv)						{nivel 4}

				recuSig(datosCliente.vehiculo, patente, patente)			{ADT LO}
			Excepciones
				claveEsUltima => sigo <- F 									{SC}
			FIn
		finMientras
	finMientras
Fin

Excepciones
